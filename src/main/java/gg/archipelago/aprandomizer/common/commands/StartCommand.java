package gg.archipelago.aprandomizer.common.commands;import com.mojang.brigadier.CommandDispatcher;import com.mojang.brigadier.context.CommandContext;import dev.koifysh.archipelago.ClientStatus;import gg.archipelago.aprandomizer.APRandomizer;import gg.archipelago.aprandomizer.SlotData;import gg.archipelago.aprandomizer.common.Utils.Utils;import net.minecraft.commands.CommandSourceStack;import net.minecraft.commands.Commands;import net.minecraft.core.BlockPos;import net.minecraft.network.chat.Component;import net.minecraft.resources.ResourceLocation;import net.minecraft.server.MinecraftServer;import net.minecraft.server.level.ServerLevel;import net.minecraft.server.level.ServerPlayer;import net.minecraft.stats.Stats;import net.minecraft.world.item.ItemStack;import net.minecraft.world.level.GameRules;import net.minecraft.world.level.Level;import net.minecraft.world.level.block.Block;import net.minecraft.world.level.block.Blocks;import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;import net.neoforged.bus.api.SubscribeEvent;import net.neoforged.fml.common.EventBusSubscriber;import net.neoforged.neoforge.event.RegisterCommandsEvent;@EventBusSubscriberpublic class StartCommand {    //build our command structure and submit it    public static void Register(CommandDispatcher<CommandSourceStack> dispatcher) {        dispatcher.register(                Commands.literal("start") //base slash command is "start"                        .executes(context -> Start(context, false))        );        dispatcher.register(                Commands.literal("forcestart") //base slash command is "start"                        .executes(context -> Start(context, true))        );    }    private static int Start(CommandContext<CommandSourceStack> commandSourceCommandContext, boolean force) {        if (!APRandomizer.isConnected() && !force) {            commandSourceCommandContext.getSource().sendFailure(Component.literal("Please connect to the Archipelago server before starting."));            return 1;        }        if (!APRandomizer.isJailPlayers()) {            commandSourceCommandContext.getSource().sendFailure(Component.literal("The game has already started! what are you doing? START PLAYING!"));            return 1;        }        Utils.sendMessageToAll("GO!");        if (APRandomizer.isConnected()) {            assert APRandomizer.getAP() != null;            APRandomizer.getAP().setGameState(ClientStatus.CLIENT_PLAYING);        }        APRandomizer.setJailPlayers(false);        MinecraftServer server = APRandomizer.getServer();        if (server == null) return 0;        ServerLevel overworld = server.getLevel(Level.OVERWORLD);        if (overworld == null) return 0;        BlockPos spawn = overworld.getSharedSpawnPos();        StructureTemplate jailStruct = overworld.getStructureManager().get(ResourceLocation.fromNamespaceAndPath(APRandomizer.MODID, "spawnjail")).orElseThrow();        BlockPos jailPos = new BlockPos(spawn.getX() + 5, 300, spawn.getZ() + 5);        for (BlockPos blockPos : BlockPos.betweenClosed(jailPos, jailPos.offset(jailStruct.getSize()))) {            overworld.setBlock(blockPos, Blocks.AIR.defaultBlockState(), Block.UPDATE_CLIENTS);        }        server.getGameRules().getRule(GameRules.RULE_DAYLIGHT).set(true, server);        server.getGameRules().getRule(GameRules.RULE_WEATHER_CYCLE).set(true, server);        server.getGameRules().getRule(GameRules.RULE_DOFIRETICK).set(true, server);        server.getGameRules().getRule(GameRules.RULE_RANDOMTICKING).set(3, server);        server.getGameRules().getRule(GameRules.RULE_DO_PATROL_SPAWNING).set(true, server);        server.getGameRules().getRule(GameRules.RULE_DO_TRADER_SPAWNING).set(true, server);        server.getGameRules().getRule(GameRules.RULE_MOBGRIEFING).set(true, server);        server.getGameRules().getRule(GameRules.RULE_DOMOBSPAWNING).set(true, server);        server.getGameRules().getRule(GameRules.RULE_DO_IMMEDIATE_RESPAWN).set(false, server);        server.getGameRules().getRule(GameRules.RULE_DOMOBLOOT).set(true, server);        server.getGameRules().getRule(GameRules.RULE_DOENTITYDROPS).set(true, server);        server.execute(() -> {            for (ServerPlayer player : server.getPlayerList().getPlayers()) {                player.getFoodData().eat(20, 20);                player.setHealth(20);                player.getInventory().clearContent();                player.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));                player.teleportTo(spawn.getX(), spawn.getY(), spawn.getZ());                APRandomizer.itemManager().ifPresent(value -> value.catchUpPlayer(player));                if (APRandomizer.isConnected()) {                    assert APRandomizer.getAP() != null;                    SlotData slotData = APRandomizer.getAP().getSlotData();                    if (slotData != null) {                        for (ItemStack iStack : slotData.startingItemStacks) {                            Utils.giveItemToPlayer(player, iStack.copy());                        }                    }                }            }        });        return 1;    }    //wait for register commands event then register ourself as a command.    @SubscribeEvent    static void onRegisterCommandsEvent(RegisterCommandsEvent event) {        StartCommand.Register(event.getDispatcher());    }}